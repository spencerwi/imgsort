#!/usr/bin/env ruby

require "fileutils"
require "rubygems"
require "docopt"
require "fastimage"

doc = <<DOCOPT

Sorts a set of image files into folders by their aspect ratios

Usage: 
    #{__FILE__} [options] <image>...

Options:
    -h, --help      Show this screen
    -v, --verbose   Verbose output

DOCOPT

# Fetch command-line args
opts = {}
begin 
    opts = Docopt::docopt(doc)
rescue Docopt::Exit => e
    puts e.message
    exit 1
end

class Image
    def initialize(filename)
        @filename = filename
        @width, @height = FastImage.size(filename)
    end

    attr_reader :filename, :width, :height

    # Get image aspect ratio
    def aspectratio
        ratio = Rational(@width, @height) # Ruby reduces fractions for us! How handy.
        if ratio == Rational(16, 10) # 16x10 is a special case, since we don't want it reduced down to 8x5
            return "16x10"
        else
            return "#{ratio.numerator}x#{ratio.denominator}" # Return the aspect ratio in WxH format
        end
    end

    # Move image into the appropriate aspectratio directory
    def sort(verbose)
        if not File::exists? aspectratio 
            if File::directory? aspectratio
                puts "#{aspectratio} is not a directory. Skipping #{@filename}." if verbose
                return
            else
                puts "  creating directory #{aspectratio}" if verbose
                FileUtils.mkdir aspectratio
            end
        end

        begin
            puts "  moving #{@filename} to #{aspectratio}" if verbose
            FileUtils.move(@filename, aspectratio)
        rescue
            puts "  Unsuccessfully tried to move #{@filename} to #{aspectratio}" if verbose
            return
        end
    end
end

def getSortRules()
    configFilePath = File.join(File.dirname(__FILE__), ".imgsortrc") 
    if File::exists? configFilePath
        read_config(configFilePath)
    else
        {
            "16x9" => "16x9",
            "16x10" => "16x10",
            "4x3" => "4x3",
            "default" => "misc"
        }
    end
end

def read_config(filename)
    rules = {}
    File.open(filename, 'r') do |rcfile|
        while line = rcfile.gets
            ratio, folder = line.split(':')
            ratio = ratio.strip
            folder = folder.strip
            rules[ratio] = folder
        end
    end
    return rules
end

# For each image supplied on the CLI
opts['<image>'].each do |imgfile|
    begin
        if File::exists? imgfile # check to ensure that the image exists
            filetype = FastImage.type(imgfile) # check the file type
            case filetype 
            when :gif, :jpg, :jpeg, :png # only operate on images
                img = Image.new(imgfile) # if it is indeed an image, create a new Image object
                puts "Sorting #{img.filename}" if opts['--verbose'] 
                img.sort(opts['--verbose']) # and perform the sort/move
            else
                puts "#{imgfile} is not an image. Skipping." if opts['--verbose']
            end
        else
            puts "#{imgfile} doesn't exist. Skipping." if opts['--verbose']
        end
    rescue
        next
    end
end

# vim: set ft=ruby
